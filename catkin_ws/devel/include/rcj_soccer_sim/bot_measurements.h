// Generated by gencpp from file rcj_soccer_sim/bot_measurements.msg
// DO NOT EDIT!


#ifndef RCJ_SOCCER_SIM_MESSAGE_BOT_MEASUREMENTS_H
#define RCJ_SOCCER_SIM_MESSAGE_BOT_MEASUREMENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rcj_soccer_sim
{
template <class ContainerAllocator>
struct bot_measurements_
{
  typedef bot_measurements_<ContainerAllocator> Type;

  bot_measurements_()
    : half_time_remaining()
    , pos_x(0.0)
    , pos_y(0.0)
    , theta(0.0)  {
    }
  bot_measurements_(const ContainerAllocator& _alloc)
    : half_time_remaining()
    , pos_x(0.0)
    , pos_y(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _half_time_remaining_type;
  _half_time_remaining_type half_time_remaining;

   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> const> ConstPtr;

}; // struct bot_measurements_

typedef ::rcj_soccer_sim::bot_measurements_<std::allocator<void> > bot_measurements;

typedef boost::shared_ptr< ::rcj_soccer_sim::bot_measurements > bot_measurementsPtr;
typedef boost::shared_ptr< ::rcj_soccer_sim::bot_measurements const> bot_measurementsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rcj_soccer_sim::bot_measurements_<ContainerAllocator1> & lhs, const ::rcj_soccer_sim::bot_measurements_<ContainerAllocator2> & rhs)
{
  return lhs.half_time_remaining == rhs.half_time_remaining &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rcj_soccer_sim::bot_measurements_<ContainerAllocator1> & lhs, const ::rcj_soccer_sim::bot_measurements_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rcj_soccer_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b801a7d32c725a671c00962bbd8b8a37";
  }

  static const char* value(const ::rcj_soccer_sim::bot_measurements_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb801a7d32c725a67ULL;
  static const uint64_t static_value2 = 0x1c00962bbd8b8a37ULL;
};

template<class ContainerAllocator>
struct DataType< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rcj_soccer_sim/bot_measurements";
  }

  static const char* value(const ::rcj_soccer_sim::bot_measurements_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time half_time_remaining\n"
"float64 pos_x\n"
"float64 pos_y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::rcj_soccer_sim::bot_measurements_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.half_time_remaining);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_measurements_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rcj_soccer_sim::bot_measurements_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rcj_soccer_sim::bot_measurements_<ContainerAllocator>& v)
  {
    s << indent << "half_time_remaining: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.half_time_remaining);
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCJ_SOCCER_SIM_MESSAGE_BOT_MEASUREMENTS_H
